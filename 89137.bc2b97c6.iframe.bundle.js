"use strict";(self.webpackChunkstorybook_app=self.webpackChunkstorybook_app||[]).push([[11347,89137],{"../../packages/ui/dist/cjs/experimental/avatar/Egg3DAvatar.js":(module,__unused_webpack_exports,__webpack_require__)=>{var mod,__create=Object.create,__defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__getProtoOf=Object.getPrototypeOf,__hasOwnProp=Object.prototype.hasOwnProperty,__copyProps=(to,from,except,desc)=>{if(from&&"object"==typeof from||"function"==typeof from)for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to},Egg3DAvatar_exports={};((target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})})(Egg3DAvatar_exports,{Egg3DAvatar:()=>Egg3DAvatar,default:()=>Egg3DAvatar_default}),module.exports=(mod=Egg3DAvatar_exports,__copyProps(__defProp({},"__esModule",{value:!0}),mod));var import_react=__webpack_require__("../../node_modules/next/dist/compiled/react/index.js"),import_fiber=__webpack_require__("../../node_modules/@react-three/fiber/dist/react-three-fiber.esm.js"),import_drei=__webpack_require__("../../node_modules/@react-three/drei/index.js"),THREE=((mod,isNodeMode,target)=>(target=null!=mod?__create(__getProtoOf(mod)):{},__copyProps(!isNodeMode&&mod&&mod.__esModule?target:__defProp(target,"default",{value:mod,enumerable:!0}),mod)))(__webpack_require__("../../node_modules/three/build/three.cjs")),import_drei2=__webpack_require__("../../node_modules/@react-three/drei/index.js"),import_jsx_runtime=__webpack_require__("../../node_modules/next/dist/compiled/react/jsx-runtime.js");const PatternMaterial=(0,import_drei2.shaderMaterial)({time:0,baseColor:new THREE.Color(16777215),secondaryColor:new THREE.Color(0),patternColor:new THREE.Color(16777215),patternType:0,patternDensity:.5,patternSize:.5,patternOpacity:.7,patternOffset:new THREE.Vector2(0,0)},"\n    varying vec2 vUv;\n    varying vec3 vNormal;\n    varying vec3 vPosition;\n    \n    void main() {\n      vUv = uv;\n      vNormal = normalize(normalMatrix * normal);\n      vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n      vPosition = mvPosition.xyz;\n      gl_Position = projectionMatrix * mvPosition;\n    }\n  ","\n    uniform float time;\n    uniform vec3 baseColor;\n    uniform vec3 secondaryColor;\n    uniform vec3 patternColor;\n    uniform float patternType;\n    uniform float patternDensity;\n    uniform float patternSize;\n    uniform float patternOpacity;\n    uniform vec2 patternOffset;\n    \n    varying vec2 vUv;\n    varying vec3 vNormal;\n    varying vec3 vPosition;\n    \n    // Random function\n    float random(vec2 st) {\n      return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n    }\n    \n    // Noise function\n    float noise(vec2 st) {\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n      \n      float a = random(i);\n      float b = random(i + vec2(1.0, 0.0));\n      float c = random(i + vec2(0.0, 1.0));\n      float d = random(i + vec2(1.0, 1.0));\n      \n      vec2 u = f * f * (3.0 - 2.0 * f);\n      return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n    }\n    \n    // Crystal pattern\n    float crystalPattern(vec2 uv, float density, float size) {\n      vec2 st = uv * density * 5.0;\n      float n = noise(st * 2.0);\n      float pattern = smoothstep(0.3, 0.7, n) * smoothstep(0.8, 0.5, n);\n      return pattern * size;\n    }\n    \n    // Spots pattern\n    float spotsPattern(vec2 uv, float density, float size) {\n      vec2 st = uv * density * 10.0;\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n      \n      float m_dist = 1.0;\n      for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n          vec2 neighbor = vec2(float(x), float(y));\n          vec2 point = random(i + neighbor) * 0.5 + 0.5;\n          vec2 diff = neighbor + point - f;\n          float dist = length(diff);\n          m_dist = min(m_dist, dist);\n        }\n      }\n      return smoothstep(0.0, 0.2, m_dist * size * 2.0);\n    }\n    \n    // Stars pattern\n    float starsPattern(vec2 uv, float density, float size) {\n      vec2 st = uv * density * 15.0;\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n      \n      float m_dist = 1.0;\n      for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n          vec2 neighbor = vec2(float(x), float(y));\n          vec2 point = 0.5 + 0.5 * sin(\n            random(i + neighbor) * 10.0 + time * 0.5\n          );\n          vec2 diff = neighbor + point - f;\n          float dist = length(diff);\n          m_dist = min(m_dist, m_dist * dist);\n        }\n      }\n      return 1.0 - smoothstep(0.0, 0.2, m_dist * size * 3.0);\n    }\n    \n    // Bubbles pattern\n    float bubblesPattern(vec2 uv, float density, float size) {\n      vec2 st = uv * density * 8.0;\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n      \n      float m_dist = 1.0;\n      for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n          vec2 neighbor = vec2(float(x), float(y));\n          vec2 point = random(i + neighbor) * 0.5 + 0.5;\n          point = 0.5 + 0.5 * sin(time * 0.5 + 6.2831 * point);\n          vec2 diff = neighbor + point - f;\n          float dist = length(diff);\n          m_dist = min(m_dist, dist);\n        }\n      }\n      return smoothstep(0.3, 0.4, m_dist * size * 2.0);\n    }\n    \n    // Zigzag pattern\n    float zigzagPattern(vec2 uv, float density, float size) {\n      uv *= density * 10.0;\n      uv.x += time * 0.1;\n      float pattern = sin(uv.x * 3.14159 * 2.0 * size) * 0.5 + 0.5;\n      return smoothstep(0.4, 0.6, pattern);\n    }\n    \n    // Geometric pattern\n    float geometricPattern(vec2 uv, float density, float size) {\n      uv = fract(uv * density * 5.0);\n      float d1 = length(uv - 0.5);\n      float d2 = length(uv - 0.5 + vec2(0.5, 0.0));\n      float d3 = length(uv - 0.5 + vec2(0.0, 0.5));\n      float d4 = length(uv - 0.5 + vec2(0.5, 0.5));\n      float pattern = min(min(d1, d2), min(d3, d4)) * size * 4.0;\n      return 1.0 - smoothstep(0.3, 0.5, pattern);\n    }\n    \n    // Fracture pattern\n    float fracturePattern(vec2 uv, float density, float size) {\n      vec2 st = uv * density * 10.0;\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n      \n      float m_dist = 1.0;\n      for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n          vec2 neighbor = vec2(float(x), float(y));\n          vec2 point = random(i + neighbor) * 0.5 + 0.5;\n          point = 0.5 + 0.5 * sin(time * 0.2 + 6.2831 * point);\n          vec2 diff = neighbor + point - f;\n          float dist = length(diff);\n          m_dist = min(m_dist, dist);\n        }\n      }\n      return 1.0 - smoothstep(0.2, 0.3, m_dist * size * 3.0);\n    }\n    \n    void main() {\n      // Base gradient (top to bottom)\n      vec3 color = mix(secondaryColor, baseColor, vUv.y);\n      \n      // Pattern effect\n      if (patternType > 0.5) {\n        vec2 uv = vUv + patternOffset;\n        float pattern = 0.0;\n        \n        if (patternType < 1.5) {\n          // Crystal\n          pattern = crystalPattern(uv, patternDensity, patternSize);\n        } else if (patternType < 2.5) {\n          // Spots\n          pattern = spotsPattern(uv, patternDensity * 2.0, patternSize);\n        } else if (patternType < 3.5) {\n          // Stars\n          pattern = starsPattern(uv, patternDensity * 1.5, patternSize);\n        } else if (patternType < 4.5) {\n          // Bubbles\n          pattern = bubblesPattern(uv, patternDensity * 1.5, patternSize);\n        } else if (patternType < 5.5) {\n          // Zigzag\n          pattern = zigzagPattern(uv, patternDensity, patternSize);\n        } else if (patternType < 6.5) {\n          // Geometric\n          pattern = geometricPattern(uv, patternDensity * 1.2, patternSize);\n        } else {\n          // Fracture\n          pattern = fracturePattern(uv, patternDensity * 1.5, patternSize);\n        }\n        \n        // Apply pattern with opacity\n        color = mix(color, patternColor, pattern * patternOpacity);\n      }\n      \n      // Enhanced lighting based on normal\n      vec3 lightDir = normalize(vec3(1.0, 1.0, 0.5));\n      float diff = max(dot(vNormal, lightDir), 0.0);\n      float ambient = 0.4;\n      float specular = pow(max(dot(reflect(-lightDir, vNormal), vec3(0.0, 0.0, 1.0)), 0.0), 32.0) * 0.3;\n      color = color * (ambient + diff) + specular;\n      \n      gl_FragColor = vec4(color, 1.0);\n    }\n  ");(0,import_fiber.extend)({PatternMaterial});const EggGeometry=()=>{const geometry=(0,import_react.useMemo)((()=>{const points=[];for(let i=0;i<=24;i++){const t=i/24,x=.6*Math.sin(t*Math.PI),y=1.2*t-.5;Math.sin(t*Math.PI);points.push(new THREE.Vector3(x,y,0))}const eggGeometry=new THREE.LatheGeometry(points,32);return eggGeometry.rotateX(Math.PI/2),eggGeometry}),[]);return(0,import_jsx_runtime.jsx)("primitive",{object:geometry,attach:"geometry"})},EggMaterial=({baseColor,secondaryColor,patterns=[],time=0})=>{const activePattern=patterns[0]||{type:"none"};return(0,import_jsx_runtime.jsx)("patternMaterial",{baseColor:new THREE.Color(baseColor),secondaryColor:new THREE.Color(secondaryColor||baseColor),patternColor:new THREE.Color(activePattern.color||"#ffffff"),patternType:(type=>{switch(type){case"crystal":return 1;case"spots":return 2;case"stars":return 3;case"bubbles":return 4;case"zigzag":return 5;case"geometric":return 6;case"fracture":return 7;default:return 0}})(activePattern.type),patternDensity:activePattern.density||.5,patternSize:activePattern.size||.5,patternOpacity:activePattern.opacity||.7,time,roughness:.3,metalness:.1,side:THREE.DoubleSide},JSON.stringify(patterns))},EggModel=({baseColor="#FFD700",secondaryColor="#FFA500",patterns=[],autoRotate=!0})=>{const meshRef=(0,import_react.useRef)(null),[time,setTime]=(0,import_react.useState)(0);(0,import_fiber.useFrame)((({clock})=>{meshRef.current&&autoRotate&&(meshRef.current.rotation.y=.2*clock.getElapsedTime()),setTime(clock.getElapsedTime())}));const activePatterns=patterns.length>0?[patterns[0]]:[];return(0,import_jsx_runtime.jsxs)("mesh",{ref:meshRef,castShadow:!0,receiveShadow:!0,children:[(0,import_jsx_runtime.jsx)(EggGeometry,{}),(0,import_jsx_runtime.jsx)(EggMaterial,{baseColor,secondaryColor,patterns:activePatterns,time})]})},Egg3DAvatar=({size=200,baseColor="#FFD700",secondaryColor="#FFA500",patterns=[],className="",autoRotate=!0,enableZoom=!0,enablePan=!0,enableRotate=!0})=>{const calculatedSecondaryColor=secondaryColor||`${baseColor}80`;return(0,import_jsx_runtime.jsx)("div",{className,style:{width:size,height:size,position:"relative",display:"inline-block"},children:(0,import_jsx_runtime.jsxs)(import_fiber.Canvas,{camera:{position:[0,0,2.5],fov:50},style:{background:"transparent",width:"100%",height:"100%"},children:[(0,import_jsx_runtime.jsx)("ambientLight",{intensity:.5}),(0,import_jsx_runtime.jsx)("pointLight",{position:[10,10,10],intensity:1}),(0,import_jsx_runtime.jsx)("pointLight",{position:[-10,-10,-10],intensity:.5}),(0,import_jsx_runtime.jsx)(EggModel,{baseColor,secondaryColor:calculatedSecondaryColor,patterns,autoRotate}),(0,import_jsx_runtime.jsx)(import_drei.OrbitControls,{enableZoom,enablePan,enableRotate})]})})};var Egg3DAvatar_default=Egg3DAvatar},"../../packages/ui/dist/cjs/experimental/avatar/Egg3DAvatar.stories.js":(module,__unused_webpack_exports,__webpack_require__)=>{var mod,__defProp=Object.defineProperty,__getOwnPropDesc=Object.getOwnPropertyDescriptor,__getOwnPropNames=Object.getOwnPropertyNames,__hasOwnProp=Object.prototype.hasOwnProperty,Egg3DAvatar_stories_exports={};((target,all)=>{for(var name in all)__defProp(target,name,{get:all[name],enumerable:!0})})(Egg3DAvatar_stories_exports,{Default:()=>Default,Interactive:()=>Interactive,PatternGallery:()=>PatternGallery,Playground:()=>Playground,WithPatterns:()=>WithPatterns,default:()=>Egg3DAvatar_stories_default}),module.exports=(mod=Egg3DAvatar_stories_exports,((to,from,except,desc)=>{if(from&&"object"==typeof from||"function"==typeof from)for(let key of __getOwnPropNames(from))!__hasOwnProp.call(to,key)&&key!==except&&__defProp(to,key,{get:()=>from[key],enumerable:!(desc=__getOwnPropDesc(from,key))||desc.enumerable});return to})(__defProp({},"__esModule",{value:!0}),mod));var import_react=__webpack_require__("../../node_modules/next/dist/compiled/react/index.js"),import_Egg3DAvatar=__webpack_require__("../../packages/ui/dist/cjs/experimental/avatar/Egg3DAvatar.js"),import_tamagui=__webpack_require__("../../node_modules/tamagui/dist/cjs/index.cjs"),import_lucide_icons=__webpack_require__("../../node_modules/@tamagui/lucide-icons/dist/cjs/index.cjs"),import_jsx_runtime=__webpack_require__("../../node_modules/next/dist/compiled/react/jsx-runtime.js");var Egg3DAvatar_stories_default={title:"experimental/avatar/Egg3DAvatar",component:import_Egg3DAvatar.Egg3DAvatar,parameters:{layout:"centered"},tags:["autodocs"],argTypes:{size:{control:{type:"range",min:100,max:500,step:10},description:"Size of the egg in pixels"},baseColor:{control:"color",description:"Base color of the egg (gradient start)"},secondaryColor:{control:"color",description:"Secondary color of the egg (gradient end)"},autoRotate:{control:"boolean",description:"Enable/disable auto-rotation"},enableZoom:{control:"boolean",description:"Enable/disable zoom controls"},enablePan:{control:"boolean",description:"Enable/disable pan controls"},enableRotate:{control:"boolean",description:"Enable/disable rotation controls"}},args:{size:300,baseColor:"#FFD700",secondaryColor:"#FFA500",autoRotate:!0,enableZoom:!0,enablePan:!0,enableRotate:!0}};const createPattern=(type,color="#FFFFFF",density=.5,size=.5,opacity=1)=>({type,color,density,size,opacity}),Default={args:{baseColor:"#6ECBFF",secondaryColor:"#0077B6"}},WithPatterns={args:{baseColor:"#A0E7E5",secondaryColor:"#4A90E2",patterns:[createPattern("crystal","#FFFFFF",.6,.7,.5),createPattern("bubbles","#4A90E2",.5,.5,.4)]}},Interactive={args:{baseColor:"#FF9E9E",secondaryColor:"#FF5E62",autoRotate:!0,enableZoom:!0,enablePan:!0,enableRotate:!0}},PatternGallery={render:()=>(0,import_jsx_runtime.jsxs)(import_tamagui.YStack,{space:"$4",padding:"$4",maxWidth:1200,margin:"0 auto",children:[(0,import_jsx_runtime.jsxs)(import_tamagui.XStack,{flexWrap:"wrap",gap:"$4",justifyContent:"center",children:[(0,import_jsx_runtime.jsx)(PatternExample,{title:"Crystal",baseColor:"#6ECBFF",secondaryColor:"#0077B6",patternType:"crystal",patternColor:"#FFFFFF"}),(0,import_jsx_runtime.jsx)(PatternExample,{title:"Spots",baseColor:"#A0E7E5",secondaryColor:"#4A90E2",patternType:"spots",patternColor:"#FFFFFF"}),(0,import_jsx_runtime.jsx)(PatternExample,{title:"Stars",baseColor:"#1A1A2E",secondaryColor:"#16213E",patternType:"stars",patternColor:"#F7D060"})]}),(0,import_jsx_runtime.jsxs)(import_tamagui.XStack,{flexWrap:"wrap",gap:"$4",justifyContent:"center",children:[(0,import_jsx_runtime.jsx)(PatternExample,{title:"Bubbles",baseColor:"#FFD1DC",secondaryColor:"#FF6B8B",patternType:"bubbles",patternColor:"#FFFFFF"}),(0,import_jsx_runtime.jsx)(PatternExample,{title:"Zigzag",baseColor:"#D4A5E9",secondaryColor:"#E2C2FF",patternType:"zigzag",patternColor:"#FFFFFF"}),(0,import_jsx_runtime.jsx)(PatternExample,{title:"Geometric",baseColor:"#FFD700",secondaryColor:"#FFA500",patternType:"geometric",patternColor:"#FFFFFF"})]}),(0,import_jsx_runtime.jsx)(import_tamagui.XStack,{justifyContent:"center",children:(0,import_jsx_runtime.jsx)(PatternExample,{title:"Fracture",baseColor:"#1E1E1E",secondaryColor:"#4A4A4A",patternType:"fracture",patternColor:"#E94560",size:350})})]})},Playground={render:()=>{const[patternType,setPatternType]=(0,import_react.useState)("crystal"),[baseColor,setBaseColor]=(0,import_react.useState)("#6ECBFF"),[secondaryColor,setSecondaryColor]=(0,import_react.useState)("#0077B6"),[patternColor,setPatternColor]=(0,import_react.useState)("#FFFFFF"),[density,setDensity]=(0,import_react.useState)(.5),[size,setSize]=(0,import_react.useState)(.5),[opacity,setOpacity]=(0,import_react.useState)(.7),[autoRotate,setAutoRotate]=(0,import_react.useState)(!0),patterns=[{type:patternType,color:patternColor,density,size,opacity}];return(0,import_jsx_runtime.jsxs)(import_tamagui.YStack,{space:"$4",padding:"$4",maxWidth:1e3,margin:"0 auto",children:[(0,import_jsx_runtime.jsxs)(import_tamagui.XStack,{flexWrap:"wrap",gap:"$4",justifyContent:"center",children:[(0,import_jsx_runtime.jsxs)(import_tamagui.YStack,{width:300,space:"$2",children:[(0,import_jsx_runtime.jsx)(import_tamagui.Label,{htmlFor:"patternType",children:"Pattern Type"}),(0,import_jsx_runtime.jsxs)(import_tamagui.Select,{id:"patternType",value:patternType,onValueChange:value=>setPatternType(value),children:[(0,import_jsx_runtime.jsx)(import_tamagui.Select.Trigger,{children:(0,import_jsx_runtime.jsx)(import_tamagui.Select.Value,{placeholder:"Select pattern"})}),(0,import_jsx_runtime.jsxs)(import_tamagui.Select.Content,{children:[(0,import_jsx_runtime.jsx)(import_tamagui.Select.ScrollUpButton,{children:(0,import_jsx_runtime.jsx)(import_lucide_icons.ChevronUp,{size:20})}),(0,import_jsx_runtime.jsx)(import_tamagui.Select.Viewport,{children:(0,import_jsx_runtime.jsx)(import_tamagui.Select.Group,{children:["crystal","spots","stars","bubbles","zigzag","geometric","fracture"].map((type=>(0,import_jsx_runtime.jsx)(import_tamagui.Select.Item,{value:type,children:(0,import_jsx_runtime.jsx)(import_tamagui.Select.ItemText,{children:type.charAt(0).toUpperCase()+type.slice(1)})},type)))})}),(0,import_jsx_runtime.jsx)(import_tamagui.Select.ScrollDownButton,{children:(0,import_jsx_runtime.jsx)(import_lucide_icons.ChevronDown,{size:20})})]})]})]}),(0,import_jsx_runtime.jsxs)(import_tamagui.YStack,{width:300,space:"$2",children:[(0,import_jsx_runtime.jsx)(import_tamagui.Label,{children:"Base Color"}),(0,import_jsx_runtime.jsx)("input",{type:"color",value:baseColor,onChange:e=>setBaseColor(e.target.value),style:{width:"100%",height:"40px"}})]}),(0,import_jsx_runtime.jsxs)(import_tamagui.YStack,{width:300,space:"$2",children:[(0,import_jsx_runtime.jsx)(import_tamagui.Label,{children:"Secondary Color"}),(0,import_jsx_runtime.jsx)("input",{type:"color",value:secondaryColor,onChange:e=>setSecondaryColor(e.target.value),style:{width:"100%",height:"40px"}})]})]}),(0,import_jsx_runtime.jsxs)(import_tamagui.XStack,{flexWrap:"wrap",gap:"$4",justifyContent:"center",children:[(0,import_jsx_runtime.jsxs)(import_tamagui.YStack,{width:300,space:"$2",children:[(0,import_jsx_runtime.jsx)(import_tamagui.Label,{children:"Pattern Color"}),(0,import_jsx_runtime.jsx)("input",{type:"color",value:patternColor,onChange:e=>setPatternColor(e.target.value),style:{width:"100%",height:"40px"}})]}),(0,import_jsx_runtime.jsxs)(import_tamagui.YStack,{width:300,space:"$2",children:[(0,import_jsx_runtime.jsxs)(import_tamagui.Label,{children:["Density: ",density.toFixed(1)]}),(0,import_jsx_runtime.jsx)("input",{type:"range",min:"0.1",max:"1",step:"0.1",value:density,onChange:e=>setDensity(parseFloat(e.target.value)),style:{width:"100%"}})]}),(0,import_jsx_runtime.jsxs)(import_tamagui.YStack,{width:300,space:"$2",children:[(0,import_jsx_runtime.jsxs)(import_tamagui.Label,{children:["Pattern Size: ",size.toFixed(1)]}),(0,import_jsx_runtime.jsx)("input",{type:"range",min:"0.1",max:"1",step:"0.1",value:size,onChange:e=>setSize(parseFloat(e.target.value)),style:{width:"100%"}})]})]}),(0,import_jsx_runtime.jsx)(import_tamagui.XStack,{justifyContent:"center",paddingTop:"$4",children:(0,import_jsx_runtime.jsxs)(import_tamagui.YStack,{alignItems:"center",space:"$4",children:[(0,import_jsx_runtime.jsx)(import_Egg3DAvatar.Egg3DAvatar,{size:300,baseColor,secondaryColor,patterns,autoRotate}),(0,import_jsx_runtime.jsx)(import_tamagui.Button,{icon:autoRotate?"Pause":"Play",onPress:()=>setAutoRotate(!autoRotate),theme:autoRotate?"active":void 0,children:autoRotate?"Pause Rotation":"Start Rotation"})]})})]})}},PatternExample=({title,baseColor,secondaryColor,patternType,patternColor,size=250})=>(0,import_jsx_runtime.jsxs)(import_tamagui.YStack,{alignItems:"center",space:"$2",children:[(0,import_jsx_runtime.jsx)("h3",{style:{margin:0,textAlign:"center"},children:title}),(0,import_jsx_runtime.jsx)(import_Egg3DAvatar.Egg3DAvatar,{size,baseColor,secondaryColor,patterns:[{type:patternType,color:patternColor,density:.6,size:.5,opacity:.8}],autoRotate:!0})]})}}]);