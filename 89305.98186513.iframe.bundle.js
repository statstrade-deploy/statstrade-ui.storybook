"use strict";(self.webpackChunkstorybook_app=self.webpackChunkstorybook_app||[]).push([[89305],{"../../packages/ui/src/stories/base/Animations2.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AnimationControls:()=>AnimationControls,AnimationSequence:()=>AnimationSequence,HoverCardAnimation:()=>HoverCardAnimation,MorphingAnimations:()=>MorphingAnimations,ScrollAnimations:()=>ScrollAnimations,StaggeredAnimations:()=>StaggeredAnimations,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/next/dist/compiled/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/next/dist/compiled/react/index.js"),tamagui__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../node_modules/@tamagui/core/dist/esm/index.mjs"),tamagui__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../node_modules/@tamagui/stacks/dist/esm/Stacks.mjs"),tamagui__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../node_modules/tamagui/dist/esm/views/Text.mjs"),tamagui__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("../../node_modules/@tamagui/button/dist/esm/Button.mjs"),tamagui__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("../../node_modules/@tamagui/web/dist/esm/styled.mjs"),tamagui__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("../../node_modules/@tamagui/animate-presence/dist/esm/AnimatePresence.mjs"),tamagui__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__("../../node_modules/@tamagui/scroll-view/dist/esm/ScrollView.mjs");const __WEBPACK_DEFAULT_EXPORT__={title:"tamagui/base/Animations2",component:tamagui__WEBPACK_IMPORTED_MODULE_2__.View,parameters:{layout:"centered",docs:{description:{component:"Advanced animation examples using Tamagui"}}}},StaggeredAnimations=()=>{const[isActive,setIsActive]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(tamagui__WEBPACK_IMPORTED_MODULE_3__.Se,{space:"$4",padding:"$4",backgroundColor:"$background",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_4__.E,{fontSize:"$6",fontWeight:"bold",color:"$color",children:"Staggered Animations"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_5__.$n,{onPress:()=>setIsActive(!isActive),children:isActive?"Reset":"Animate"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_3__.lW,{space:"$2",children:[0,1,2,3,4].map((i=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_2__.View,{width:40,height:40,backgroundColor:"$blue8",borderRadius:"$4",animation:"bouncy",y:isActive?[0,-40,0][i%3]:0,scale:isActive?[1,1.2,1][i%3]:1,rotate:isActive?["0deg","10deg","-10deg","0deg"][i%4]:"0deg",transition:{type:"spring",damping:10,delay:100*i}},i)))})]})},MorphingShape=(0,tamagui__WEBPACK_IMPORTED_MODULE_6__.I)(tamagui__WEBPACK_IMPORTED_MODULE_2__.Stack,{width:100,height:100,backgroundColor:"$purple8",variants:{shape:{circle:{borderRadius:1e3,backgroundColor:"$purple8"},square:{borderRadius:4,backgroundColor:"$green8"},triangle:{width:0,height:0,backgroundColor:"transparent",borderStyle:"solid",borderLeftWidth:50,borderRightWidth:50,borderBottomWidth:86.6,borderLeftColor:"transparent",borderRightColor:"transparent",borderBottomColor:"$blue8"}}},defaultVariants:{shape:"circle"}}),MorphingAnimations=()=>{const[shape,setShape]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("circle"),shapes=["circle","square","triangle"];return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(tamagui__WEBPACK_IMPORTED_MODULE_3__.Se,{space:"$4",padding:"$4",alignItems:"center",backgroundColor:"$background",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_4__.E,{fontSize:"$6",fontWeight:"bold",color:"$color",children:"Morphing Shapes"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_5__.$n,{onPress:()=>{const nextIndex=(shapes.indexOf(shape)+1)%shapes.length;setShape(shapes[nextIndex])},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(tamagui__WEBPACK_IMPORTED_MODULE_4__.E,{color:"$color",children:["Morph to ",shapes[(shapes.indexOf(shape)+1)%shapes.length]]})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_7__.N,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(MorphingShape,{shape,animation:"bouncy",enterStyle:{scale:.8,opacity:0},exitStyle:{scale:1.2,opacity:0},scale:1,opacity:1,transition:{type:"spring",damping:15}},shape)})]})},ScrollAnimations=()=>{const scrollViewRef=(0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null),[scrollY,setScrollY]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(tamagui__WEBPACK_IMPORTED_MODULE_3__.Se,{space:"$4",padding:"$4",width:300,height:400,backgroundColor:"$background",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_4__.E,{fontSize:"$6",fontWeight:"bold",color:"$color",children:"Scroll Animations"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_8__.B,{ref:scrollViewRef,flex:1,onScroll:event=>{setScrollY(event.nativeEvent.contentOffset.y)},scrollEventThrottle:16,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_3__.Se,{space:"$4",paddingBottom:"$4",children:Array.from({length:10}).map(((_,i)=>{const scrollProgress=Math.min(1,Math.max(0,(scrollY-40*i)/100));return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(tamagui__WEBPACK_IMPORTED_MODULE_2__.View,{height:80,backgroundColor:"$blue8",borderRadius:"$4",padding:"$4",justifyContent:"center",x:100*scrollProgress,opacity:1-.5*scrollProgress,scale:1-.2*scrollProgress,animation:"lazy",pressStyle:{scale:.98},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(tamagui__WEBPACK_IMPORTED_MODULE_4__.E,{color:"white",children:["Item ",i+1]}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(tamagui__WEBPACK_IMPORTED_MODULE_4__.E,{color:"white",opacity:.8,fontSize:"$2",children:["Scroll progress: ",Math.round(100*scrollProgress),"%"]})]},i)}))})})]})},AnimationControls=()=>{const[animationState,setAnimationState]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("idle"),animations={idle:{rotate:"0deg",scale:1},wiggle:{rotate:["0deg","10deg","-10deg","0deg"],scale:[1,1.1,1]},jump:{y:[0,-30,0],scale:[1,.9,1]},spin:{rotate:"360deg"}};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(tamagui__WEBPACK_IMPORTED_MODULE_3__.Se,{space:"$4",padding:"$4",alignItems:"center",backgroundColor:"$background",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_4__.E,{fontSize:"$6",fontWeight:"bold",color:"$color",children:"Animation Controls"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_3__.lW,{space:"$2",flexWrap:"wrap",justifyContent:"center",children:Object.keys(animations).map((key=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_5__.$n,{onPress:()=>setAnimationState(key),theme:animationState===key?"active":void 0,children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_4__.E,{color:animationState===key?"white":"$color",children:key.charAt(0).toUpperCase()+key.slice(1)})},key)))}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_2__.View,{width:100,height:100,backgroundColor:"$red8",borderRadius:"$4",animation:"spin"===animationState?"quick":"bouncy",...animations[animationState]||{},transition:{type:"spin"===animationState?"timing":"spring",duration:"spin"===animationState?1e3:void 0,loop:"spin"===animationState},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_4__.E,{color:"white",textAlign:"center",marginTop:"$4",children:animationState})})]})},AnimationSequence=()=>{const[step,setStep]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(tamagui__WEBPACK_IMPORTED_MODULE_3__.Se,{space:"$4",padding:"$4",alignItems:"center",backgroundColor:"$background",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_4__.E,{fontSize:"$6",fontWeight:"bold",color:"$color",children:"Animation Sequence"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_5__.$n,{onPress:()=>setStep((step+1)%4),marginBottom:"$4",children:"Next Step"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_2__.View,{width:100,height:100,backgroundColor:"$blue8",borderRadius:"$4",animation:"bouncy",...(s=>{switch(s){case 0:return{x:0,y:0,rotate:"0deg",backgroundColor:"$blue8"};case 1:return{x:50,y:0,rotate:"45deg",backgroundColor:"$green8"};case 2:return{x:0,y:50,rotate:"90deg",backgroundColor:"$red8"};case 3:return{x:-50,y:0,rotate:"135deg",backgroundColor:"$purple8"};default:return{}}})(step),transition:{type:"spring",damping:15},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(tamagui__WEBPACK_IMPORTED_MODULE_4__.E,{color:"white",textAlign:"center",marginTop:"$4",children:["Step ",step+1]})}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_3__.lW,{space:"$2",marginTop:"$4",children:Array.from({length:4}).map(((_,i)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_2__.View,{width:8,height:8,borderRadius:100,backgroundColor:i===step?"$blue8":"$gray8",opacity:i===step?1:.5},i)))})]})},HoverCardAnimation=()=>{const[isHovered,setIsHovered]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(tamagui__WEBPACK_IMPORTED_MODULE_3__.Se,{space:"$4",padding:"$4",alignItems:"center",backgroundColor:"$background",children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_4__.E,{fontSize:"$6",fontWeight:"bold",color:"$color",children:"Hover Card"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(tamagui__WEBPACK_IMPORTED_MODULE_2__.View,{width:200,padding:"$4",backgroundColor:"$gray3",borderRadius:"$4",space:"$3",onHoverIn:()=>setIsHovered(!0),onHoverOut:()=>setIsHovered(!1),animation:"quick",scale:isHovered?1.02:1,y:isHovered?-5:0,shadowColor:"$color.gray8",shadowRadius:isHovered?15:5,shadowOpacity:isHovered?.2:.1,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_4__.E,{fontWeight:"bold",color:"$color",children:"Hover over me"}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_7__.N,{children:isHovered&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxs)(tamagui__WEBPACK_IMPORTED_MODULE_3__.Se,{animation:"quick",enterStyle:{opacity:0,y:-10},exitStyle:{opacity:0,y:-10},opacity:1,y:0,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_4__.E,{fontSize:"$2",color:"$color",children:"This content appears on hover with a nice animation. You can put any content here."}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_5__.$n,{size:"$2",marginTop:"$2",alignSelf:"flex-start",children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(tamagui__WEBPACK_IMPORTED_MODULE_4__.E,{color:"white",children:"Action"})})]})})]})]})},__namedExportsOrder=["StaggeredAnimations","MorphingAnimations","ScrollAnimations","AnimationControls","AnimationSequence","HoverCardAnimation"];StaggeredAnimations.parameters={...StaggeredAnimations.parameters,docs:{...StaggeredAnimations.parameters?.docs,source:{originalSource:'() => {\n  const [isActive, setIsActive] = useState(false);\n  return <YStack space="$4" padding="$4" backgroundColor="$background">\n      <Text fontSize="$6" fontWeight="bold" color="$color">Staggered Animations</Text>\n      \n      <Button onPress={() => setIsActive(!isActive)}>\n        {isActive ? \'Reset\' : \'Animate\'}\n      </Button>\n      \n      <XStack space="$2">\n        {[0, 1, 2, 3, 4].map(i => <View key={i} width={40} height={40} backgroundColor="$blue8" borderRadius="$4" animation="bouncy" y={isActive ? [0, -40, 0][i % 3] : 0} scale={isActive ? [1, 1.2, 1][i % 3] : 1} rotate={isActive ? [\'0deg\', \'10deg\', \'-10deg\', \'0deg\'][i % 4] : \'0deg\'} transition={{\n        type: \'spring\',\n        damping: 10,\n        delay: i * 100\n      }} />)}\n      </XStack>\n    </YStack>;\n}',...StaggeredAnimations.parameters?.docs?.source}}},MorphingAnimations.parameters={...MorphingAnimations.parameters,docs:{...MorphingAnimations.parameters?.docs,source:{originalSource:"() => {\n  const [shape, setShape] = useState<'circle' | 'square' | 'triangle'>('circle');\n  const shapes: Array<'circle' | 'square' | 'triangle'> = ['circle', 'square', 'triangle'];\n  return <YStack space=\"$4\" padding=\"$4\" alignItems=\"center\" backgroundColor=\"$background\">\n      <Text fontSize=\"$6\" fontWeight=\"bold\" color=\"$color\">Morphing Shapes</Text>\n      \n      <Button onPress={() => {\n      const currentIndex = shapes.indexOf(shape);\n      const nextIndex = (currentIndex + 1) % shapes.length;\n      setShape(shapes[nextIndex]);\n    }}>\n        <Text color=\"$color\">Morph to {shapes[(shapes.indexOf(shape) + 1) % shapes.length]}</Text>\n      </Button>\n      \n      <AnimatePresence>\n        <MorphingShape key={shape} shape={shape} animation=\"bouncy\" enterStyle={{\n        scale: 0.8,\n        opacity: 0\n      }} exitStyle={{\n        scale: 1.2,\n        opacity: 0\n      }} scale={1} opacity={1} transition={{\n        type: 'spring',\n        damping: 15\n      }} />\n      </AnimatePresence>\n    </YStack>;\n}",...MorphingAnimations.parameters?.docs?.source}}},ScrollAnimations.parameters={...ScrollAnimations.parameters,docs:{...ScrollAnimations.parameters?.docs,source:{originalSource:'() => {\n  const scrollViewRef = useRef(null);\n  const [scrollY, setScrollY] = useState(0);\n  return <YStack space="$4" padding="$4" width={300} height={400} backgroundColor="$background">\n      <Text fontSize="$6" fontWeight="bold" color="$color">Scroll Animations</Text>\n      \n      <ScrollView ref={scrollViewRef} flex={1} onScroll={event => {\n      setScrollY(event.nativeEvent.contentOffset.y);\n    }} scrollEventThrottle={16}>\n        <YStack space="$4" paddingBottom="$4">\n          {Array.from({\n          length: 10\n        }).map((_, i) => {\n          const scrollProgress = Math.min(1, Math.max(0, (scrollY - i * 40) / 100));\n          return <View key={i} height={80} backgroundColor="$blue8" borderRadius="$4" padding="$4" justifyContent="center" x={scrollProgress * 100} opacity={1 - scrollProgress * 0.5} scale={1 - scrollProgress * 0.2} animation="lazy" pressStyle={{\n            scale: 0.98\n          }}>\n                <Text color="white">Item {i + 1}</Text>\n                <Text color="white" opacity={0.8} fontSize="$2">\n                  Scroll progress: {Math.round(scrollProgress * 100)}%\n                </Text>\n              </View>;\n        })}\n        </YStack>\n      </ScrollView>\n    </YStack>;\n}',...ScrollAnimations.parameters?.docs?.source}}},AnimationControls.parameters={...AnimationControls.parameters,docs:{...AnimationControls.parameters?.docs,source:{originalSource:"() => {\n  const [animationState, setAnimationState] = useState('idle');\n  const animations = {\n    idle: {\n      rotate: '0deg',\n      scale: 1\n    },\n    wiggle: {\n      rotate: ['0deg', '10deg', '-10deg', '0deg'],\n      scale: [1, 1.1, 1]\n    },\n    jump: {\n      y: [0, -30, 0],\n      scale: [1, 0.9, 1]\n    },\n    spin: {\n      rotate: '360deg'\n    }\n  };\n  return <YStack space=\"$4\" padding=\"$4\" alignItems=\"center\" backgroundColor=\"$background\">\n      <Text fontSize=\"$6\" fontWeight=\"bold\" color=\"$color\">Animation Controls</Text>\n      \n      <XStack space=\"$2\" flexWrap=\"wrap\" justifyContent=\"center\">\n        {Object.keys(animations).map(key => <Button key={key} onPress={() => setAnimationState(key)} theme={animationState === key ? 'active' : undefined}>\n            <Text color={animationState === key ? 'white' : '$color'}>\n              {key.charAt(0).toUpperCase() + key.slice(1)}\n            </Text>\n          </Button>)}\n      </XStack>\n      \n      <View width={100} height={100} backgroundColor=\"$red8\" borderRadius=\"$4\" animation={animationState === 'spin' ? 'quick' : 'bouncy'} {...animations[animationState] || {}} transition={{\n      type: animationState === 'spin' ? 'timing' : 'spring',\n      duration: animationState === 'spin' ? 1000 : undefined,\n      loop: animationState === 'spin'\n    }}>\n        <Text color=\"white\" textAlign=\"center\" marginTop=\"$4\">\n          {animationState}\n        </Text>\n      </View>\n    </YStack>;\n}",...AnimationControls.parameters?.docs?.source}}},AnimationSequence.parameters={...AnimationSequence.parameters,docs:{...AnimationSequence.parameters?.docs,source:{originalSource:'() => {\n  const [step, setStep] = useState(0);\n  const totalSteps = 4;\n  const getAnimationForStep = (s: number) => {\n    switch (s) {\n      case 0:\n        return {\n          x: 0,\n          y: 0,\n          rotate: \'0deg\',\n          backgroundColor: \'$blue8\'\n        };\n      case 1:\n        return {\n          x: 50,\n          y: 0,\n          rotate: \'45deg\',\n          backgroundColor: \'$green8\'\n        };\n      case 2:\n        return {\n          x: 0,\n          y: 50,\n          rotate: \'90deg\',\n          backgroundColor: \'$red8\'\n        };\n      case 3:\n        return {\n          x: -50,\n          y: 0,\n          rotate: \'135deg\',\n          backgroundColor: \'$purple8\'\n        };\n      default:\n        return {};\n    }\n  };\n  return <YStack space="$4" padding="$4" alignItems="center" backgroundColor="$background">\n      <Text fontSize="$6" fontWeight="bold" color="$color">Animation Sequence</Text>\n      \n      <Button onPress={() => setStep((step + 1) % totalSteps)} marginBottom="$4">\n        Next Step\n      </Button>\n      \n      <View width={100} height={100} backgroundColor="$blue8" borderRadius="$4" animation="bouncy" {...getAnimationForStep(step)} transition={{\n      type: \'spring\',\n      damping: 15\n    }}>\n        <Text color="white" textAlign="center" marginTop="$4">\n          Step {step + 1}\n        </Text>\n      </View>\n      \n      <XStack space="$2" marginTop="$4">\n        {Array.from({\n        length: totalSteps\n      }).map((_, i) => <View key={i} width={8} height={8} borderRadius={100} backgroundColor={i === step ? \'$blue8\' : \'$gray8\'} opacity={i === step ? 1 : 0.5} />)}\n      </XStack>\n    </YStack>;\n}',...AnimationSequence.parameters?.docs?.source}}},HoverCardAnimation.parameters={...HoverCardAnimation.parameters,docs:{...HoverCardAnimation.parameters?.docs,source:{originalSource:'() => {\n  const [isHovered, setIsHovered] = useState(false);\n  return <YStack space="$4" padding="$4" alignItems="center" backgroundColor="$background">\n      <Text fontSize="$6" fontWeight="bold" color="$color">Hover Card</Text>\n      \n      <View width={200} padding="$4" backgroundColor="$gray3" borderRadius="$4" space="$3" onHoverIn={() => setIsHovered(true)} onHoverOut={() => setIsHovered(false)} animation="quick" scale={isHovered ? 1.02 : 1} y={isHovered ? -5 : 0} shadowColor="$color.gray8" shadowRadius={isHovered ? 15 : 5} shadowOpacity={isHovered ? 0.2 : 0.1}>\n        <Text fontWeight="bold" color="$color">Hover over me</Text>\n        \n        <AnimatePresence>\n          {isHovered && <YStack animation="quick" enterStyle={{\n          opacity: 0,\n          y: -10\n        }} exitStyle={{\n          opacity: 0,\n          y: -10\n        }} opacity={1} y={0}>\n              <Text fontSize="$2" color="$color">\n                This content appears on hover with a nice animation. You can put any content here.\n              </Text>\n              <Button size="$2" marginTop="$2" alignSelf="flex-start">\n                <Text color="white">Action</Text>\n              </Button>\n            </YStack>}\n        </AnimatePresence>\n      </View>\n    </YStack>;\n}',...HoverCardAnimation.parameters?.docs?.source}}}}}]);