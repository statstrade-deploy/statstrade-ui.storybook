"use strict";(self.webpackChunkstorybook_app=self.webpackChunkstorybook_app||[]).push([[66811],{"../../packages/ui/dist/jsx/experimental/avatar/Egg3DAvatar.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Egg3DAvatar:()=>Egg3DAvatar,default:()=>Egg3DAvatar_default});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/next/dist/compiled/react/index.js"),_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../node_modules/@react-three/fiber/dist/react-three-fiber.esm.js"),_react_three_drei__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../node_modules/@react-three/drei/index.js"),three__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../node_modules/three/build/three.core.js"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/next/dist/compiled/react/jsx-runtime.js");const PatternMaterial=(0,_react_three_drei__WEBPACK_IMPORTED_MODULE_2__.shaderMaterial)({time:0,baseColor:new three__WEBPACK_IMPORTED_MODULE_3__.Q1f(16777215),secondaryColor:new three__WEBPACK_IMPORTED_MODULE_3__.Q1f(0),patternColor:new three__WEBPACK_IMPORTED_MODULE_3__.Q1f(16777215),patternType:0,patternDensity:.5,patternSize:.5,patternOpacity:.7,patternOffset:new three__WEBPACK_IMPORTED_MODULE_3__.I9Y(0,0)},"\n    varying vec2 vUv;\n    varying vec3 vNormal;\n    varying vec3 vPosition;\n    \n    void main() {\n      vUv = uv;\n      vNormal = normalize(normalMatrix * normal);\n      vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n      vPosition = mvPosition.xyz;\n      gl_Position = projectionMatrix * mvPosition;\n    }\n  ","\n    uniform float time;\n    uniform vec3 baseColor;\n    uniform vec3 secondaryColor;\n    uniform vec3 patternColor;\n    uniform float patternType;\n    uniform float patternDensity;\n    uniform float patternSize;\n    uniform float patternOpacity;\n    uniform vec2 patternOffset;\n    \n    varying vec2 vUv;\n    varying vec3 vNormal;\n    varying vec3 vPosition;\n    \n    // Random function\n    float random(vec2 st) {\n      return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);\n    }\n    \n    // Noise function\n    float noise(vec2 st) {\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n      \n      float a = random(i);\n      float b = random(i + vec2(1.0, 0.0));\n      float c = random(i + vec2(0.0, 1.0));\n      float d = random(i + vec2(1.0, 1.0));\n      \n      vec2 u = f * f * (3.0 - 2.0 * f);\n      return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n    }\n    \n    // Crystal pattern\n    float crystalPattern(vec2 uv, float density, float size) {\n      vec2 st = uv * density * 5.0;\n      float n = noise(st * 2.0);\n      float pattern = smoothstep(0.3, 0.7, n) * smoothstep(0.8, 0.5, n);\n      return pattern * size;\n    }\n    \n    // Spots pattern\n    float spotsPattern(vec2 uv, float density, float size) {\n      vec2 st = uv * density * 10.0;\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n      \n      float m_dist = 1.0;\n      for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n          vec2 neighbor = vec2(float(x), float(y));\n          vec2 point = random(i + neighbor) * 0.5 + 0.5;\n          vec2 diff = neighbor + point - f;\n          float dist = length(diff);\n          m_dist = min(m_dist, dist);\n        }\n      }\n      return smoothstep(0.0, 0.2, m_dist * size * 2.0);\n    }\n    \n    // Stars pattern\n    float starsPattern(vec2 uv, float density, float size) {\n      vec2 st = uv * density * 15.0;\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n      \n      float m_dist = 1.0;\n      for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n          vec2 neighbor = vec2(float(x), float(y));\n          vec2 point = 0.5 + 0.5 * sin(\n            random(i + neighbor) * 10.0 + time * 0.5\n          );\n          vec2 diff = neighbor + point - f;\n          float dist = length(diff);\n          m_dist = min(m_dist, m_dist * dist);\n        }\n      }\n      return 1.0 - smoothstep(0.0, 0.2, m_dist * size * 3.0);\n    }\n    \n    // Bubbles pattern\n    float bubblesPattern(vec2 uv, float density, float size) {\n      vec2 st = uv * density * 8.0;\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n      \n      float m_dist = 1.0;\n      for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n          vec2 neighbor = vec2(float(x), float(y));\n          vec2 point = random(i + neighbor) * 0.5 + 0.5;\n          point = 0.5 + 0.5 * sin(time * 0.5 + 6.2831 * point);\n          vec2 diff = neighbor + point - f;\n          float dist = length(diff);\n          m_dist = min(m_dist, dist);\n        }\n      }\n      return smoothstep(0.3, 0.4, m_dist * size * 2.0);\n    }\n    \n    // Zigzag pattern\n    float zigzagPattern(vec2 uv, float density, float size) {\n      uv *= density * 10.0;\n      uv.x += time * 0.1;\n      float pattern = sin(uv.x * 3.14159 * 2.0 * size) * 0.5 + 0.5;\n      return smoothstep(0.4, 0.6, pattern);\n    }\n    \n    // Geometric pattern\n    float geometricPattern(vec2 uv, float density, float size) {\n      uv = fract(uv * density * 5.0);\n      float d1 = length(uv - 0.5);\n      float d2 = length(uv - 0.5 + vec2(0.5, 0.0));\n      float d3 = length(uv - 0.5 + vec2(0.0, 0.5));\n      float d4 = length(uv - 0.5 + vec2(0.5, 0.5));\n      float pattern = min(min(d1, d2), min(d3, d4)) * size * 4.0;\n      return 1.0 - smoothstep(0.3, 0.5, pattern);\n    }\n    \n    // Fracture pattern\n    float fracturePattern(vec2 uv, float density, float size) {\n      vec2 st = uv * density * 10.0;\n      vec2 i = floor(st);\n      vec2 f = fract(st);\n      \n      float m_dist = 1.0;\n      for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n          vec2 neighbor = vec2(float(x), float(y));\n          vec2 point = random(i + neighbor) * 0.5 + 0.5;\n          point = 0.5 + 0.5 * sin(time * 0.2 + 6.2831 * point);\n          vec2 diff = neighbor + point - f;\n          float dist = length(diff);\n          m_dist = min(m_dist, dist);\n        }\n      }\n      return 1.0 - smoothstep(0.2, 0.3, m_dist * size * 3.0);\n    }\n    \n    void main() {\n      // Base gradient (top to bottom)\n      vec3 color = mix(secondaryColor, baseColor, vUv.y);\n      \n      // Pattern effect\n      if (patternType > 0.5) {\n        vec2 uv = vUv + patternOffset;\n        float pattern = 0.0;\n        \n        if (patternType < 1.5) {\n          // Crystal\n          pattern = crystalPattern(uv, patternDensity, patternSize);\n        } else if (patternType < 2.5) {\n          // Spots\n          pattern = spotsPattern(uv, patternDensity * 2.0, patternSize);\n        } else if (patternType < 3.5) {\n          // Stars\n          pattern = starsPattern(uv, patternDensity * 1.5, patternSize);\n        } else if (patternType < 4.5) {\n          // Bubbles\n          pattern = bubblesPattern(uv, patternDensity * 1.5, patternSize);\n        } else if (patternType < 5.5) {\n          // Zigzag\n          pattern = zigzagPattern(uv, patternDensity, patternSize);\n        } else if (patternType < 6.5) {\n          // Geometric\n          pattern = geometricPattern(uv, patternDensity * 1.2, patternSize);\n        } else {\n          // Fracture\n          pattern = fracturePattern(uv, patternDensity * 1.5, patternSize);\n        }\n        \n        // Apply pattern with opacity\n        color = mix(color, patternColor, pattern * patternOpacity);\n      }\n      \n      // Enhanced lighting based on normal\n      vec3 lightDir = normalize(vec3(1.0, 1.0, 0.5));\n      float diff = max(dot(vNormal, lightDir), 0.0);\n      float ambient = 0.4;\n      float specular = pow(max(dot(reflect(-lightDir, vNormal), vec3(0.0, 0.0, 1.0)), 0.0), 32.0) * 0.3;\n      color = color * (ambient + diff) + specular;\n      \n      gl_FragColor = vec4(color, 1.0);\n    }\n  ");(0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.extend)({PatternMaterial});const EggGeometry=()=>{const geometry=(0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)((()=>{const points=[];for(let i=0;i<=24;i++){const t=i/24,x=.6*Math.sin(t*Math.PI),y=1.2*t-.5;Math.sin(t*Math.PI);points.push(new three__WEBPACK_IMPORTED_MODULE_3__.Pq0(x,y,0))}const eggGeometry=new three__WEBPACK_IMPORTED_MODULE_3__.nzx(points,32);return eggGeometry.rotateX(Math.PI/2),eggGeometry}),[]);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("primitive",{object:geometry,attach:"geometry"})},EggMaterial=({baseColor,secondaryColor,patterns=[],time=0})=>{const activePattern=patterns[0]||{type:"none"};return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("patternMaterial",{baseColor:new three__WEBPACK_IMPORTED_MODULE_3__.Q1f(baseColor),secondaryColor:new three__WEBPACK_IMPORTED_MODULE_3__.Q1f(secondaryColor||baseColor),patternColor:new three__WEBPACK_IMPORTED_MODULE_3__.Q1f(activePattern.color||"#ffffff"),patternType:(type=>{switch(type){case"crystal":return 1;case"spots":return 2;case"stars":return 3;case"bubbles":return 4;case"zigzag":return 5;case"geometric":return 6;case"fracture":return 7;default:return 0}})(activePattern.type),patternDensity:activePattern.density||.5,patternSize:activePattern.size||.5,patternOpacity:activePattern.opacity||.7,time,roughness:.3,metalness:.1,side:three__WEBPACK_IMPORTED_MODULE_3__.$EB},JSON.stringify(patterns))},EggModel=({baseColor="#FFD700",secondaryColor="#FFA500",patterns=[],autoRotate=!0})=>{const meshRef=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),[time,setTime]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);(0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.useFrame)((({clock})=>{meshRef.current&&autoRotate&&(meshRef.current.rotation.y=.2*clock.getElapsedTime()),setTime(clock.getElapsedTime())}));const activePatterns=patterns.length>0?[patterns[0]]:[];return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("mesh",{ref:meshRef,castShadow:!0,receiveShadow:!0,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EggGeometry,{}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EggMaterial,{baseColor,secondaryColor,patterns:activePatterns,time})]})},Egg3DAvatar=({size=200,baseColor="#FFD700",secondaryColor="#FFA500",patterns=[],className="",autoRotate=!0,enableZoom=!0,enablePan=!0,enableRotate=!0})=>{const calculatedSecondaryColor=secondaryColor||`${baseColor}80`;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("div",{className,style:{width:size,height:size,position:"relative",display:"inline-block"},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.Canvas,{camera:{position:[0,0,2.5],fov:50},style:{background:"transparent",width:"100%",height:"100%"},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("ambientLight",{intensity:.5}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("pointLight",{position:[10,10,10],intensity:1}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("pointLight",{position:[-10,-10,-10],intensity:.5}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(EggModel,{baseColor,secondaryColor:calculatedSecondaryColor,patterns,autoRotate}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_react_three_drei__WEBPACK_IMPORTED_MODULE_2__.OrbitControls,{enableZoom,enablePan,enableRotate})]})})};var Egg3DAvatar_default=Egg3DAvatar}}]);